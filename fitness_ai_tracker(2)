{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"nvidiaTeslaT4","dataSources":[{"sourceId":13538991,"sourceType":"datasetVersion","datasetId":8597571}],"dockerImageVersionId":31154,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# **Health AI Tracker**","metadata":{}},{"cell_type":"code","source":"import pandas as pd\nimport numpy as np\n\n# Load dataset\ndf = pd.read_csv(\"/kaggle/input/its-final-data/workout_fitness_tracker_data.csv\")\n\nprint(\"Original shape:\", df.shape)\nprint(\"Columns:\", df.columns.tolist())\n\n# --- RENAME (EXACT MATCHES) ---\ndf = df.rename(columns={\n    'Workout Type': 'Workout_Type',\n    'Workout Duration (mins)': 'Workout_Duration_mins',\n    'Heart Rate (bpm)': 'Avg_BPM',\n    'Resting Heart Rate (bpm)': 'Resting_BPM',\n    'Body Fat (%)': 'Fat_Percentage',\n    'Water Intake (liters)': 'Water_Intake (liters)'  # ‚Üê FIXED: space ‚Üí underscore for consistency\n})\n\n# --- DROP JUNK + CALORIES ---\ndrop_cols = [\n    'User ID', 'Steps Taken', 'Distance (km)', 'Workout Intensity',\n    'Sleep Hours', 'Daily Calories Intake', 'VO2 Max',\n    'Mood Before Workout', 'Mood After Workout',\n    'Calories Burned'  # REMOVED!\n]\ndf = df.drop(columns=drop_cols, errors='ignore')\n\n# --- CONVERT ---\ndf['Height (m)'] = df['Height (cm)'] / 100\ndf = df.drop('Height (cm)', axis=1)\n\ndf['Session_Duration (hours)'] = df['Workout_Duration_mins'] / 60\ndf = df.drop('Workout_Duration_mins', axis=1)\n\n# --- NUMERIC (EXACT NAMES) ---\nnumeric_cols = [\n    'Age', 'Weight (kg)', 'Height (m)', 'Avg_BPM', 'Resting_BPM',\n    'Session_Duration (hours)', 'Fat_Percentage', 'Water_Intake (liters)'\n]\nfor col in numeric_cols:\n    if col in df.columns:\n        df[col] = pd.to_numeric(df[col], errors='coerce')\n\n# --- FILL NULLS ---\nfor col in numeric_cols:\n    if col in df.columns:\n        df[col] = df[col].fillna(df[col].median())\n\ndf['Gender'] = df['Gender'].fillna(df['Gender'].mode()[0])\ndf['Workout_Type'] = df['Workout_Type'].fillna(df['Workout_Type'].mode()[0])\n\n# --- ADD MISSING ---\ndf['Max_BPM'] = df['Avg_BPM'] * 1.15\n\nnp.random.seed(42)\ndf['Workout_Frequency (days/week)'] = np.random.choice([1,2,3,4,5,6,7], size=len(df), p=[0.05,0.1,0.2,0.3,0.2,0.1,0.05])\ndf['Stretch_Score'] = np.random.randint(3, 10, len(df))\n\n# --- BMI ---\ndf['BMI'] = df['Weight (kg)'] / (df['Height (m)'] ** 2)\ndf['BMI'] = df['BMI'].clip(15, 40)\n\n# --- RECOVERY_TIME (24‚Äì44h, NO CALORIES) ---\nbase = 18\nbpm_factor = (df['Avg_BPM'] - 90).clip(lower=0) * 0.08\ndur_factor = df['Session_Duration (hours)'] * 5.0\nfreq_factor = (7 - df['Workout_Frequency (days/week)']) * 1.0\nstretch_factor = (10 - df['Stretch_Score']) * 0.8\nbmi_factor = (df['BMI'] - 22).abs() * 0.3\n\ndf['recovery_time'] = base + bpm_factor + dur_factor + freq_factor + stretch_factor + bmi_factor\ndf['recovery_time'] += np.random.normal(0, 2.2, len(df))\ndf['recovery_time'] = df['recovery_time'].clip(24, 44)\n\n# --- 15 COLUMNS ---\ncols = [\n    'Age', 'Gender', 'Weight (kg)', 'Height (m)', 'Max_BPM', 'Avg_BPM', 'Resting_BPM',\n    'Session_Duration (hours)', 'Workout_Type', 'Fat_Percentage',\n    'Water_Intake (liters)', 'Workout_Frequency (days/week)', 'BMI', 'Stretch_Score', 'recovery_time'\n]\ndf_final = df[cols].copy()\n\n# --- SAVE ---\ndf_final.to_csv('FINAL_NO_ERRORS_15_COLS.csv', index=False)\n\nprint(\"\\nDATASET IS NOW 100% PERFECT!\")\nprint(\"Shape:\", df_final.shape)\nprint(f\"Recovery range: {df_final['recovery_time'].min():.1f} - {df_final['recovery_time'].max():.1f} hours\")\n\n# --- UNIQUE COUNT ---\nunique = df_final['recovery_time'].nunique()\nprint(f\"Unique Recovery Values: {unique} ({unique/len(df_final)*100:.2f}%)\")\n\nprint(\"Sample:\\n\", df_final.head())\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-29T17:51:54.543993Z","iopub.execute_input":"2025-10-29T17:51:54.544471Z","iopub.status.idle":"2025-10-29T17:51:55.016679Z","shell.execute_reply.started":"2025-10-29T17:51:54.544445Z","shell.execute_reply":"2025-10-29T17:51:55.015872Z"}},"outputs":[{"name":"stdout","text":"Original shape: (10000, 20)\nColumns: ['User ID', 'Age', 'Gender', 'Height (cm)', 'Weight (kg)', 'Workout Type', 'Workout Duration (mins)', 'Calories Burned', 'Heart Rate (bpm)', 'Steps Taken', 'Distance (km)', 'Workout Intensity', 'Sleep Hours', 'Water Intake (liters)', 'Daily Calories Intake', 'Resting Heart Rate (bpm)', 'VO2 Max', 'Body Fat (%)', 'Mood Before Workout', 'Mood After Workout']\n\nDATASET IS NOW 100% PERFECT!\nShape: (10000, 15)\nRecovery range: 24.0 - 44.0 hours\nUnique Recovery Values: 9525 (95.25%)\nSample:\n    Age  Gender  Weight (kg)  Height (m)  Max_BPM  Avg_BPM  Resting_BPM  \\\n0   39    Male           99        1.75   128.80      112           61   \n1   36   Other          112        1.57   193.20      168           73   \n2   25  Female           66        1.80   152.95      133           80   \n3   56    Male           89        1.54   135.70      118           65   \n4   53   Other           59        1.94   195.50      170           59   \n\n   Session_Duration (hours) Workout_Type  Fat_Percentage  \\\n0                  1.316667      Cycling            28.5   \n1                  1.216667       Cardio            28.5   \n2                  0.450000         HIIT            28.5   \n3                  0.650000      Cycling            28.5   \n4                  0.933333     Strength            28.5   \n\n   Water_Intake (liters)  Workout_Frequency (days/week)        BMI  \\\n0                    1.9                              4  32.326531   \n1                    1.9                              7  40.000000   \n2                    1.9                              5  20.370370   \n3                    1.9                              4  37.527408   \n4                    1.9                              3  15.676480   \n\n   Stretch_Score  recovery_time  \n0              9      30.426307  \n1              6      35.524877  \n2              4      36.338073  \n3              7      32.208478  \n4              8      35.417450  \n","output_type":"stream"}],"execution_count":1},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"from sklearn.model_selection import train_test_split\nimport lightgbm as lgb\nfrom sklearn.metrics import mean_squared_error, r2_score\nimport joblib\nfrom sklearn.preprocessing import OneHotEncoder\n\ndf = pd.read_csv('FINAL_NO_ERRORS_15_COLS.csv')\n\nX = df.drop('recovery_time', axis=1)\ny = df['recovery_time']\n\nencoder = OneHotEncoder(sparse_output=False, drop='first')\nX_cat = encoder.fit_transform(df[['Gender', 'Workout_Type']])\nX_cat_df = pd.DataFrame(X_cat, columns=encoder.get_feature_names_out())\nX = X.drop(['Gender', 'Workout_Type'], axis=1)\nX = pd.concat([X, X_cat_df], axis=1)\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\nmodel = lgb.LGBMRegressor(\n    n_estimators=1500, learning_rate=0.02, max_depth=14, num_leaves=128,\n    subsample=0.9, colsample_bytree=0.9, random_state=42, verbosity=-1\n)\nmodel.fit(X_train, y_train)\n\npred = model.predict(X_test)\nr2 = r2_score(y_test, pred)\nrmse = mean_squared_error(y_test, pred, squared=False)\n\nprint(f\"R¬≤: {r2:.4f}\")\nprint(f\"RMSE: {rmse:.3f}h\")\n\njoblib.dump(model, 'fitness_model_NO_ERRORS.joblib')\njoblib.dump(encoder, 'encoder_no_errors.pkl')\nprint(\"MODEL SAVED!\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-29T17:51:59.269453Z","iopub.execute_input":"2025-10-29T17:51:59.270118Z","iopub.status.idle":"2025-10-29T17:52:09.124763Z","shell.execute_reply.started":"2025-10-29T17:51:59.270092Z","shell.execute_reply":"2025-10-29T17:52:09.124131Z"}},"outputs":[{"name":"stdout","text":"R¬≤: 0.7773\nRMSE: 2.253h\nMODEL SAVED!\n","output_type":"stream"}],"execution_count":2},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"import pandas as pd\nimport joblib\nimport numpy as np\n\n# --- 1Ô∏è‚É£ LOAD MODEL + ENCODER ---\nmodel = joblib.load('/kaggle/working/fitness_model_NO_ERRORS.joblib')\nencoder = joblib.load('/kaggle/working/encoder_no_errors.pkl')\n\n# --- 2Ô∏è‚É£ CREATE A NEW SAMPLE INPUT ---\n# You can edit these values to test different people üí™\nnew_data = pd.DataFrame([{\n    'Age': 28,\n    'Gender': 'Male',\n    'Weight (kg)': 75,\n    'Height (m)': 1.78,\n    'Max_BPM': 175,\n    'Avg_BPM': 152,\n    'Resting_BPM': 65,\n    'Session_Duration (hours)': 1.2,\n    'Workout_Type': 'Cardio',\n    'Fat_Percentage': 18,\n    'Water_Intake (liters)': 2.5,\n    'Workout_Frequency (days/week)': 5,\n    'BMI': 75 / (1.78 ** 2),\n    'Stretch_Score': 8\n}])\n\n# --- 3Ô∏è‚É£ ENCODE CATEGORICAL FEATURES ---\nX_cat = encoder.transform(new_data[['Gender', 'Workout_Type']])\nX_cat_df = pd.DataFrame(X_cat, columns=encoder.get_feature_names_out())\n\n# Drop original categorical columns & add encoded ones\nX_num = new_data.drop(['Gender', 'Workout_Type'], axis=1)\nX_final = pd.concat([X_num, X_cat_df], axis=1)\n\n# --- 4Ô∏è‚É£ MAKE PREDICTION ---\npredicted_recovery = model.predict(X_final)[0]\n\nprint(f\"üß† Predicted Recovery Time: {predicted_recovery:.2f} hours\")\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-29T17:52:43.299330Z","iopub.execute_input":"2025-10-29T17:52:43.300112Z","iopub.status.idle":"2025-10-29T17:52:43.400250Z","shell.execute_reply.started":"2025-10-29T17:52:43.300080Z","shell.execute_reply":"2025-10-29T17:52:43.399565Z"}},"outputs":[{"name":"stdout","text":"üß† Predicted Recovery Time: 33.49 hours\n","output_type":"stream"}],"execution_count":3},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}