{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "10a76504",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "papermill": {
     "duration": 0.004192,
     "end_time": "2025-10-29T17:55:38.544181",
     "exception": false,
     "start_time": "2025-10-29T17:55:38.539989",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4bbefc20",
   "metadata": {
    "papermill": {
     "duration": 0.002965,
     "end_time": "2025-10-29T17:55:38.550272",
     "exception": false,
     "start_time": "2025-10-29T17:55:38.547307",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ecd78d68",
   "metadata": {
    "papermill": {
     "duration": 0.00264,
     "end_time": "2025-10-29T17:55:38.555940",
     "exception": false,
     "start_time": "2025-10-29T17:55:38.553300",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "d0920f8b",
   "metadata": {
    "papermill": {
     "duration": 0.002605,
     "end_time": "2025-10-29T17:55:38.561241",
     "exception": false,
     "start_time": "2025-10-29T17:55:38.558636",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# **Health AI Tracker**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "d2bc6cfd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-29T17:55:38.567506Z",
     "iopub.status.busy": "2025-10-29T17:55:38.567267Z",
     "iopub.status.idle": "2025-10-29T17:55:40.274137Z",
     "shell.execute_reply": "2025-10-29T17:55:40.273400Z"
    },
    "papermill": {
     "duration": 1.711868,
     "end_time": "2025-10-29T17:55:40.275755",
     "exception": false,
     "start_time": "2025-10-29T17:55:38.563887",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Original shape: (10000, 20)\n",
      "Columns: ['User ID', 'Age', 'Gender', 'Height (cm)', 'Weight (kg)', 'Workout Type', 'Workout Duration (mins)', 'Calories Burned', 'Heart Rate (bpm)', 'Steps Taken', 'Distance (km)', 'Workout Intensity', 'Sleep Hours', 'Water Intake (liters)', 'Daily Calories Intake', 'Resting Heart Rate (bpm)', 'VO2 Max', 'Body Fat (%)', 'Mood Before Workout', 'Mood After Workout']\n",
      "\n",
      "DATASET IS NOW 100% PERFECT!\n",
      "Shape: (10000, 15)\n",
      "Recovery range: 24.0 - 44.0 hours\n",
      "Unique Recovery Values: 9525 (95.25%)\n",
      "Sample:\n",
      "    Age  Gender  Weight (kg)  Height (m)  Max_BPM  Avg_BPM  Resting_BPM  \\\n",
      "0   39    Male           99        1.75   128.80      112           61   \n",
      "1   36   Other          112        1.57   193.20      168           73   \n",
      "2   25  Female           66        1.80   152.95      133           80   \n",
      "3   56    Male           89        1.54   135.70      118           65   \n",
      "4   53   Other           59        1.94   195.50      170           59   \n",
      "\n",
      "   Session_Duration (hours) Workout_Type  Fat_Percentage  \\\n",
      "0                  1.316667      Cycling            28.5   \n",
      "1                  1.216667       Cardio            28.5   \n",
      "2                  0.450000         HIIT            28.5   \n",
      "3                  0.650000      Cycling            28.5   \n",
      "4                  0.933333     Strength            28.5   \n",
      "\n",
      "   Water_Intake (liters)  Workout_Frequency (days/week)        BMI  \\\n",
      "0                    1.9                              4  32.326531   \n",
      "1                    1.9                              7  40.000000   \n",
      "2                    1.9                              5  20.370370   \n",
      "3                    1.9                              4  37.527408   \n",
      "4                    1.9                              3  15.676480   \n",
      "\n",
      "   Stretch_Score  recovery_time  \n",
      "0              9      30.426307  \n",
      "1              6      35.524877  \n",
      "2              4      36.338073  \n",
      "3              7      32.208478  \n",
      "4              8      35.417450  \n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "\n",
    "# Load dataset\n",
    "df = pd.read_csv(\"/kaggle/input/its-final-data/workout_fitness_tracker_data.csv\")\n",
    "\n",
    "print(\"Original shape:\", df.shape)\n",
    "print(\"Columns:\", df.columns.tolist())\n",
    "\n",
    "# --- RENAME (EXACT MATCHES) ---\n",
    "df = df.rename(columns={\n",
    "    'Workout Type': 'Workout_Type',\n",
    "    'Workout Duration (mins)': 'Workout_Duration_mins',\n",
    "    'Heart Rate (bpm)': 'Avg_BPM',\n",
    "    'Resting Heart Rate (bpm)': 'Resting_BPM',\n",
    "    'Body Fat (%)': 'Fat_Percentage',\n",
    "    'Water Intake (liters)': 'Water_Intake (liters)'  # ← FIXED: space → underscore for consistency\n",
    "})\n",
    "\n",
    "# --- DROP JUNK + CALORIES ---\n",
    "drop_cols = [\n",
    "    'User ID', 'Steps Taken', 'Distance (km)', 'Workout Intensity',\n",
    "    'Sleep Hours', 'Daily Calories Intake', 'VO2 Max',\n",
    "    'Mood Before Workout', 'Mood After Workout',\n",
    "    'Calories Burned'  # REMOVED!\n",
    "]\n",
    "df = df.drop(columns=drop_cols, errors='ignore')\n",
    "\n",
    "# --- CONVERT ---\n",
    "df['Height (m)'] = df['Height (cm)'] / 100\n",
    "df = df.drop('Height (cm)', axis=1)\n",
    "\n",
    "df['Session_Duration (hours)'] = df['Workout_Duration_mins'] / 60\n",
    "df = df.drop('Workout_Duration_mins', axis=1)\n",
    "\n",
    "# --- NUMERIC (EXACT NAMES) ---\n",
    "numeric_cols = [\n",
    "    'Age', 'Weight (kg)', 'Height (m)', 'Avg_BPM', 'Resting_BPM',\n",
    "    'Session_Duration (hours)', 'Fat_Percentage', 'Water_Intake (liters)'\n",
    "]\n",
    "for col in numeric_cols:\n",
    "    if col in df.columns:\n",
    "        df[col] = pd.to_numeric(df[col], errors='coerce')\n",
    "\n",
    "# --- FILL NULLS ---\n",
    "for col in numeric_cols:\n",
    "    if col in df.columns:\n",
    "        df[col] = df[col].fillna(df[col].median())\n",
    "\n",
    "df['Gender'] = df['Gender'].fillna(df['Gender'].mode()[0])\n",
    "df['Workout_Type'] = df['Workout_Type'].fillna(df['Workout_Type'].mode()[0])\n",
    "\n",
    "# --- ADD MISSING ---\n",
    "df['Max_BPM'] = df['Avg_BPM'] * 1.15\n",
    "\n",
    "np.random.seed(42)\n",
    "df['Workout_Frequency (days/week)'] = np.random.choice([1,2,3,4,5,6,7], size=len(df), p=[0.05,0.1,0.2,0.3,0.2,0.1,0.05])\n",
    "df['Stretch_Score'] = np.random.randint(3, 10, len(df))\n",
    "\n",
    "# --- BMI ---\n",
    "df['BMI'] = df['Weight (kg)'] / (df['Height (m)'] ** 2)\n",
    "df['BMI'] = df['BMI'].clip(15, 40)\n",
    "\n",
    "# --- RECOVERY_TIME (24–44h, NO CALORIES) ---\n",
    "base = 18\n",
    "bpm_factor = (df['Avg_BPM'] - 90).clip(lower=0) * 0.08\n",
    "dur_factor = df['Session_Duration (hours)'] * 5.0\n",
    "freq_factor = (7 - df['Workout_Frequency (days/week)']) * 1.0\n",
    "stretch_factor = (10 - df['Stretch_Score']) * 0.8\n",
    "bmi_factor = (df['BMI'] - 22).abs() * 0.3\n",
    "\n",
    "df['recovery_time'] = base + bpm_factor + dur_factor + freq_factor + stretch_factor + bmi_factor\n",
    "df['recovery_time'] += np.random.normal(0, 2.2, len(df))\n",
    "df['recovery_time'] = df['recovery_time'].clip(24, 44)\n",
    "\n",
    "# --- 15 COLUMNS ---\n",
    "cols = [\n",
    "    'Age', 'Gender', 'Weight (kg)', 'Height (m)', 'Max_BPM', 'Avg_BPM', 'Resting_BPM',\n",
    "    'Session_Duration (hours)', 'Workout_Type', 'Fat_Percentage',\n",
    "    'Water_Intake (liters)', 'Workout_Frequency (days/week)', 'BMI', 'Stretch_Score', 'recovery_time'\n",
    "]\n",
    "df_final = df[cols].copy()\n",
    "\n",
    "# --- SAVE ---\n",
    "df_final.to_csv('FINAL_NO_ERRORS_15_COLS.csv', index=False)\n",
    "\n",
    "print(\"\\nDATASET IS NOW 100% PERFECT!\")\n",
    "print(\"Shape:\", df_final.shape)\n",
    "print(f\"Recovery range: {df_final['recovery_time'].min():.1f} - {df_final['recovery_time'].max():.1f} hours\")\n",
    "\n",
    "# --- UNIQUE COUNT ---\n",
    "unique = df_final['recovery_time'].nunique()\n",
    "print(f\"Unique Recovery Values: {unique} ({unique/len(df_final)*100:.2f}%)\")\n",
    "\n",
    "print(\"Sample:\\n\", df_final.head())\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "93f07f71",
   "metadata": {
    "papermill": {
     "duration": 0.002401,
     "end_time": "2025-10-29T17:55:40.281185",
     "exception": false,
     "start_time": "2025-10-29T17:55:40.278784",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "f7199e32",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-29T17:55:40.287865Z",
     "iopub.status.busy": "2025-10-29T17:55:40.287269Z",
     "iopub.status.idle": "2025-10-29T17:55:51.247741Z",
     "shell.execute_reply": "2025-10-29T17:55:51.246772Z"
    },
    "papermill": {
     "duration": 10.965157,
     "end_time": "2025-10-29T17:55:51.249072",
     "exception": false,
     "start_time": "2025-10-29T17:55:40.283915",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "R²: 0.7773\n",
      "RMSE: 2.253h\n",
      "MODEL SAVED!\n"
     ]
    }
   ],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "import lightgbm as lgb\n",
    "from sklearn.metrics import mean_squared_error, r2_score\n",
    "import joblib\n",
    "from sklearn.preprocessing import OneHotEncoder\n",
    "\n",
    "df = pd.read_csv('FINAL_NO_ERRORS_15_COLS.csv')\n",
    "\n",
    "X = df.drop('recovery_time', axis=1)\n",
    "y = df['recovery_time']\n",
    "\n",
    "encoder = OneHotEncoder(sparse_output=False, drop='first')\n",
    "X_cat = encoder.fit_transform(df[['Gender', 'Workout_Type']])\n",
    "X_cat_df = pd.DataFrame(X_cat, columns=encoder.get_feature_names_out())\n",
    "X = X.drop(['Gender', 'Workout_Type'], axis=1)\n",
    "X = pd.concat([X, X_cat_df], axis=1)\n",
    "\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
    "\n",
    "model = lgb.LGBMRegressor(\n",
    "    n_estimators=1500, learning_rate=0.02, max_depth=14, num_leaves=128,\n",
    "    subsample=0.9, colsample_bytree=0.9, random_state=42, verbosity=-1\n",
    ")\n",
    "model.fit(X_train, y_train)\n",
    "\n",
    "pred = model.predict(X_test)\n",
    "r2 = r2_score(y_test, pred)\n",
    "rmse = mean_squared_error(y_test, pred, squared=False)\n",
    "\n",
    "print(f\"R²: {r2:.4f}\")\n",
    "print(f\"RMSE: {rmse:.3f}h\")\n",
    "\n",
    "joblib.dump(model, 'fitness_model_NO_ERRORS.joblib')\n",
    "joblib.dump(encoder, 'encoder_no_errors.pkl')\n",
    "print(\"MODEL SAVED!\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b874a0da",
   "metadata": {
    "papermill": {
     "duration": 0.00269,
     "end_time": "2025-10-29T17:55:51.254885",
     "exception": false,
     "start_time": "2025-10-29T17:55:51.252195",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4abaea17",
   "metadata": {
    "papermill": {
     "duration": 0.002485,
     "end_time": "2025-10-29T17:55:51.259904",
     "exception": false,
     "start_time": "2025-10-29T17:55:51.257419",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "76adb4a2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-29T17:55:51.266389Z",
     "iopub.status.busy": "2025-10-29T17:55:51.265771Z",
     "iopub.status.idle": "2025-10-29T17:55:51.360279Z",
     "shell.execute_reply": "2025-10-29T17:55:51.359467Z"
    },
    "papermill": {
     "duration": 0.099156,
     "end_time": "2025-10-29T17:55:51.361682",
     "exception": false,
     "start_time": "2025-10-29T17:55:51.262526",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "🧠 Predicted Recovery Time: 33.49 hours\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import joblib\n",
    "import numpy as np\n",
    "\n",
    "# --- 1️⃣ LOAD MODEL + ENCODER ---\n",
    "model = joblib.load('/kaggle/working/fitness_model_NO_ERRORS.joblib')\n",
    "encoder = joblib.load('/kaggle/working/encoder_no_errors.pkl')\n",
    "\n",
    "# --- 2️⃣ CREATE A NEW SAMPLE INPUT ---\n",
    "# You can edit these values to test different people 💪\n",
    "new_data = pd.DataFrame([{\n",
    "    'Age': 28,\n",
    "    'Gender': 'Male',\n",
    "    'Weight (kg)': 75,\n",
    "    'Height (m)': 1.78,\n",
    "    'Max_BPM': 175,\n",
    "    'Avg_BPM': 152,\n",
    "    'Resting_BPM': 65,\n",
    "    'Session_Duration (hours)': 1.2,\n",
    "    'Workout_Type': 'Cardio',\n",
    "    'Fat_Percentage': 18,\n",
    "    'Water_Intake (liters)': 2.5,\n",
    "    'Workout_Frequency (days/week)': 5,\n",
    "    'BMI': 75 / (1.78 ** 2),\n",
    "    'Stretch_Score': 8\n",
    "}])\n",
    "\n",
    "# --- 3️⃣ ENCODE CATEGORICAL FEATURES ---\n",
    "X_cat = encoder.transform(new_data[['Gender', 'Workout_Type']])\n",
    "X_cat_df = pd.DataFrame(X_cat, columns=encoder.get_feature_names_out())\n",
    "\n",
    "# Drop original categorical columns & add encoded ones\n",
    "X_num = new_data.drop(['Gender', 'Workout_Type'], axis=1)\n",
    "X_final = pd.concat([X_num, X_cat_df], axis=1)\n",
    "\n",
    "# --- 4️⃣ MAKE PREDICTION ---\n",
    "predicted_recovery = model.predict(X_final)[0]\n",
    "\n",
    "print(f\"🧠 Predicted Recovery Time: {predicted_recovery:.2f} hours\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3f0a19bb",
   "metadata": {
    "papermill": {
     "duration": 0.00292,
     "end_time": "2025-10-29T17:55:51.367781",
     "exception": false,
     "start_time": "2025-10-29T17:55:51.364861",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7e90515b",
   "metadata": {
    "papermill": {
     "duration": 0.002636,
     "end_time": "2025-10-29T17:55:51.373357",
     "exception": false,
     "start_time": "2025-10-29T17:55:51.370721",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f2ddc44f",
   "metadata": {
    "papermill": {
     "duration": 0.002486,
     "end_time": "2025-10-29T17:55:51.378547",
     "exception": false,
     "start_time": "2025-10-29T17:55:51.376061",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "738315ad",
   "metadata": {
    "papermill": {
     "duration": 0.002587,
     "end_time": "2025-10-29T17:55:51.383798",
     "exception": false,
     "start_time": "2025-10-29T17:55:51.381211",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b7efd9c0",
   "metadata": {
    "papermill": {
     "duration": 0.002579,
     "end_time": "2025-10-29T17:55:51.388919",
     "exception": false,
     "start_time": "2025-10-29T17:55:51.386340",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ee4e794b",
   "metadata": {
    "papermill": {
     "duration": 0.002659,
     "end_time": "2025-10-29T17:55:51.394131",
     "exception": false,
     "start_time": "2025-10-29T17:55:51.391472",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4785f584",
   "metadata": {
    "papermill": {
     "duration": 0.002484,
     "end_time": "2025-10-29T17:55:51.399115",
     "exception": false,
     "start_time": "2025-10-29T17:55:51.396631",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "47d033ad",
   "metadata": {
    "papermill": {
     "duration": 0.002664,
     "end_time": "2025-10-29T17:55:51.404631",
     "exception": false,
     "start_time": "2025-10-29T17:55:51.401967",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c25dbc2a",
   "metadata": {
    "papermill": {
     "duration": 0.002521,
     "end_time": "2025-10-29T17:55:51.409878",
     "exception": false,
     "start_time": "2025-10-29T17:55:51.407357",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "nvidiaTeslaT4",
   "dataSources": [
    {
     "datasetId": 8597571,
     "sourceId": 13538991,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 31154,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 17.234659,
   "end_time": "2025-10-29T17:55:52.029880",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-10-29T17:55:34.795221",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
